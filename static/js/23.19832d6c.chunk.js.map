{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["getItems","count","Array","from","length","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","SimpleListDnD","props","_this","classCallCheck","this","_super","call","onDragEnd","destination","items","state","source","index","setState","_this2","react_default","a","createElement","react_beautiful_dnd_esm","droppableId","provided","snapshot","assign","droppableProps","ref","innerRef","style","isDraggingOver","background","padding","width","item","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread2","userSelect","grid","margin","placeholder","Component","SimpleHorizontalList","bind","assertThisInitialized","direction","display","overflow","offset","arguments","undefined","move","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","getItemStyle","getListStyle","TwoListDnD","selected","id2List","droppable","droppable2","getList","className","AppDragAndDrop","matx","routeSegments","name","path","title","Drag_Drop_SimpleListDnD","Drag_Drop_SimpleHorizontalList","Drag_Drop_TwoListDnD"],"mappings":"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","file":"static/js/23.19832d6c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nclass SimpleListDnD extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItems(10)\r\n    };\r\n  }\r\n\r\n  onDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleListDnD;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = count =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k}`,\r\n    content: `item ${k}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  display: \"flex\",\r\n  padding: grid,\r\n  overflow: \"auto\"\r\n});\r\n\r\nclass SimpleHorizontalList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: getItems(6)\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}\r\n            >\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                      style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                      )}\r\n                    >\r\n                      {item.content}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleHorizontalList;\r\n","import React, { Component } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n  Array.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `item-${k + offset}`,\r\n    content: `item ${k + offset}`\r\n  }));\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 0 ${grid}px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  padding: grid,\r\n  width: 250\r\n});\r\n\r\nclass TwoListDnD extends Component {\r\n  state = {\r\n    items: getItems(10),\r\n    selected: getItems(5, 10)\r\n  };\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable: \"items\",\r\n    droppable2: \"selected\"\r\n  };\r\n\r\n  getList = id => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = result => {\r\n    const { source, destination } = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      let state = { items };\r\n\r\n      if (source.droppableId === \"droppable2\") {\r\n        state = { selected: items };\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      this.setState({\r\n        items: result.droppable,\r\n        selected: result.droppable2\r\n      });\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate components.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <div className=\"flex flex-space-around\">\r\n          <Droppable droppableId=\"droppable\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.content}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          <Droppable droppableId=\"droppable2\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n              >\r\n                {this.state.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {item.content}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TwoListDnD;\r\n","import React from \"react\";\r\nimport SimpleListDnD from \"./SimpleListDnD\";\r\nimport { Breadcrumb, SimpleCard } from \"matx\";\r\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\r\nimport TwoListDnD from \"./TwoListDnD\";\r\n\r\nconst AppDragAndDrop = () => {\r\n  return (\r\n    <div className=\"m-sm-30\">\r\n      <div  className=\"mb-sm-30\">\r\n        <Breadcrumb\r\n          routeSegments={[\r\n            { name: \"others\", path: \"/drag-and-drop\" },\r\n            { name: \"Drag and Drop\" }\r\n          ]}\r\n        />\r\n      </div>\r\n      <SimpleCard title=\"Simple List Drag and Drop\">\r\n        <SimpleListDnD />\r\n      </SimpleCard>\r\n      <div className=\"py-12\" />\r\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\r\n        <SimpleHorizontalList />\r\n      </SimpleCard>\r\n      <div className=\"py-12\" />\r\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\r\n        <TwoListDnD />\r\n      </SimpleCard>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppDragAndDrop;\r\n"],"sourceRoot":""}